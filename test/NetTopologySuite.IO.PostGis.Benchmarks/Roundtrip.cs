using BenchmarkDotNet.Attributes;
using BenchmarkDotNet.Columns;
using BenchmarkDotNet.Configs;
using BenchmarkDotNet.Jobs;
using BenchmarkDotNet.Running;
using NetTopologySuite.Geometries;
using NetTopologySuite.Geometries.Implementation;
using Perfolizer.Horology;

namespace NetTopologySuite.IO.PostGis.Benchmarks
{
    [MemoryDiagnoser]
    public class Roundtrip
    {
        private static readonly PostGisReader br1 = new();
        private static readonly PostGisReader br2 = new(new PackedCoordinateSequenceFactory(), new PrecisionModel());
        private static readonly PostGisReader br3 = new(new RawCoordinateSequenceFactory(new[] { Ordinates.XYZM }), new PrecisionModel());
        private static readonly PostGisWriter bw1 = new();
        private static readonly WKTReader wr = new();

        private static byte[] pg1;

        public Roundtrip()
        {
            var geom = wr.Read("POLYGON ((-88.07156 37.51099, -88.08788 37.47627, -88.31171 37.44285, -88.35918 37.40931, -88.41985 37.42029, -88.46764 37.40076, -88.51132 37.29685, -88.50143 37.25778, -88.4507 37.20567, -88.42252 37.15691, -88.45047 37.09867, -88.4768 37.07214, -88.4907 37.06818, -88.51727 37.06477, -88.55927 37.07282, -88.61422 37.10905, -88.68837 37.13541, -88.73911 37.14118, -88.74651 37.15211, -88.86329 37.20219, -88.9325 37.21841, -88.99317 37.22004, -89.06503 37.18586, -89.11682 37.11214, -89.14635 37.09319, -89.16955 37.06424, -89.17433 37.02571, -89.15025 36.99844, -89.12986 36.98811, -89.19351 36.98677, -89.21005 37.02897, -89.23768 37.04173, -89.26405 37.08712, -89.28423 37.09124, -89.30329 37.08538, -89.3097 37.06091, -89.26424 37.02773, -89.262 37.00869, -89.28277 36.99921, -89.31098 37.00968, -89.38295 37.04921, -89.37999 37.09908, -89.4238 37.1372, -89.44052 37.16532, -89.46822 37.22427, -89.46531 37.25373, -89.48959 37.256, -89.51388 37.2764, -89.51388 37.30496, -89.50058 37.32944, -89.46874 37.33941, -89.43574 37.35572, -89.42757 37.41102, -89.45362 37.45319, -89.49478 37.49173, -89.52497 37.57196, -89.51337 37.61593, -89.51918 37.65037, -89.51337 37.67984, -89.52152 37.6948, -89.58144 37.7061, -89.66646 37.74545, -89.67586 37.78397, -89.69105 37.80479, -89.72845 37.84099, -89.85171 37.90506, -89.86105 37.90549, -89.86681 37.89188, -89.90055 37.8759, -89.93787 37.87804, -89.97891 37.91188, -89.95823 37.96363, -90.01081 37.96932, -90.04192 37.99321, -90.11934 38.03227, -90.13471 38.05395, -90.20753 38.08891, -90.25406 38.12217, -90.28963 38.16682, -90.33672 38.18871, -90.36477 38.2343, -90.36935 38.32356, -90.35869 38.36533, -90.33961 38.39085, -90.30184 38.42736, -90.26578 38.51869, -90.26123 38.53277, -90.24094 38.5628, -90.18371 38.61027, -90.18358 38.65877, -90.20224 38.70036, -90.19657 38.72396, -90.1634 38.7731, -90.13518 38.78548, -90.12173 38.80051, -90.11312 38.83047, -90.13281 38.85303, -90.24393 38.91451, -90.27893 38.92472, -90.31974 38.92491, -90.41307 38.96233, -90.46984 38.95918, -90.53043 38.89161, -90.57033 38.87133, -90.62721 38.8808, -90.66888 38.93525, -90.70607 39.03779, -90.70759 39.05818, -90.6904 39.0937, -90.71674 39.14421, -90.71819 39.19587, -90.73234 39.22475, -90.73808 39.24781, -90.77934 39.2968, -90.85049 39.35045, -90.94789 39.40059, -91.03634 39.44441, -91.06438 39.47398, -91.09361 39.52893, -91.15619 39.55259, -91.20325 39.60002, -91.31766 39.68592, -91.36709 39.72464, -91.37342 39.76127, -91.38171 39.80377, -91.44919 39.86305, -91.45099 39.88524, -91.43405 39.90183, -91.43039 39.92184, -91.44724 39.94606, -91.48729 40.00575, -91.504 40.06671, -91.51613 40.13454, -91.50655 40.20046, -91.49893 40.25138, -91.48669 40.30962, -91.44859 40.3719, -91.41882 40.38688, -91.38576 40.39236, -91.37276 40.40299, -91.3854 40.44725, -91.37479 40.50365, -91.3821 40.5285, -91.41287 40.54799, -91.41112 40.57297, -91.37561 40.60344, -91.26206 40.63955, -91.21491 40.64382, -91.1625 40.65631, -91.12916 40.68215, -91.11999 40.7054, -91.09275 40.76155, -91.0889 40.83373, -91.04921 40.87958, -90.98328 40.92393, -90.96071 40.9505, -90.95465 41.07036, -90.95779 41.10436, -90.99034 41.14437, -91.01826 41.16583, -91.05632 41.17626, -91.10152 41.23152, -91.10235 41.26782, -91.07328 41.3349, -91.05579 41.40138, -91.02749 41.42351, -91.00069 41.43108, -90.94965 41.42123, -90.84414 41.44462, -90.7799 41.44982, -90.70821 41.45006, -90.65879 41.46232, -90.6007 41.50959, -90.54084 41.52597, -90.45499 41.52755, -90.43497 41.54358, -90.423 41.56727, -90.34837 41.58685, -90.33935 41.6028, -90.34113 41.64909, -90.32603 41.72274, -90.30489 41.75647, -90.25531 41.78174, -90.19584 41.80614, -90.15452 41.93078, -90.14267 41.98396, -90.15054 42.03343, -90.1681 42.06104, -90.16665 42.10375, -90.17609 42.1205, -90.19157 42.12269, -90.23093 42.15972, -90.3236 42.19732, -90.36773 42.21021, -90.40717 42.24265, -90.41798 42.26392, -90.42768 42.34063, -90.4416 42.36007, -90.49104 42.38878, -90.56358 42.42184, -90.60583 42.46056, -90.64835 42.47564, -90.65177 42.4947, -90.63833 42.50936, -90.41997 42.50836, -89.92357 42.50411, -89.83462 42.50346, -89.4005 42.49749, -89.35944 42.49791, -88.93908 42.49086, -88.76495 42.49091, -88.70652 42.48966, -88.2979 42.49197, -88.1947 42.48961, -87.79731 42.48913, -87.83694 42.31421, -87.76024 42.15646, -87.67055 42.05982, -87.61262 41.84733, -87.52986 41.72359, -87.53265 41.46972, -87.53245 41.3013, -87.53173 41.17376, -87.53202 41.00993, -87.53267 40.74541, -87.53717 40.49461, -87.53567 40.48325, -87.53534 40.16619, -87.53577 39.8873, -87.53558 39.60934, -87.53857 39.47745, -87.54021 39.35053, -87.59766 39.33827, -87.62524 39.3074, -87.61062 39.29766, -87.6158 39.28142, -87.60689 39.25816, -87.58456 39.24875, -87.58859 39.20847, -87.59421 39.19813, -87.60792 39.19607, -87.64426 39.16851, -87.67033 39.14668, -87.65945 39.13065, -87.66226 39.11347, -87.63167 39.10394, -87.63087 39.08897, -87.61201 39.08461, -87.58532 39.06243, -87.58175 38.99574, -87.59186 38.99408, -87.5479 38.97708, -87.53347 38.9637, -87.53018 38.93192, -87.5392 38.90486, -87.55906 38.86981, -87.55051 38.85789, -87.50789 38.79556, -87.51903 38.7767, -87.508 38.76972, -87.50832 38.73663, -87.54389 38.68597, -87.58848 38.67217, -87.62519 38.64281, -87.62865 38.62292, -87.61983 38.59921, -87.64059 38.59318, -87.65285 38.57387, -87.67294 38.54742, -87.65139 38.51537, -87.65353 38.50044, -87.67991 38.50401, -87.69282 38.48153, -87.7561 38.46613, -87.75866 38.4571, -87.73895 38.44548, -87.74843 38.41797, -87.78402 38.37812, -87.8345 38.35252, -87.85008 38.2861, -87.86301 38.28536, -87.87404 38.31679, -87.88345 38.31555, -87.88847 38.30066, -87.91411 38.28105, -87.91365 38.30235, -87.92592 38.30477, -87.98002 38.24109, -87.98601 38.23481, -87.97793 38.20071, -87.93229 38.17113, -87.93199 38.15753, -87.95057 38.13691, -87.9735 38.13176, -88.01855 38.1033, -88.01233 38.09235, -87.96487 38.09675, -87.9753 38.07331, -88.03473 38.05408, -88.04309 38.04512, -88.04147 38.0383, -88.0217 38.03353, -88.02921 38.00824, -88.02171 37.97506, -88.04251 37.95626, -88.04177 37.9345, -88.06462 37.92978, -88.07894 37.944, -88.084 37.92366, -88.03044 37.91759, -88.02659 37.90576, -88.04487 37.896, -88.10008 37.90617, -88.10146 37.89531, -88.07574 37.86781, -88.03424 37.84375, -88.04214 37.82752, -88.08926 37.83125, -88.08603 37.81761, -88.03558 37.80568, -88.07247 37.7354, -88.13364 37.70075, -88.15937 37.66069, -88.15763 37.62848, -88.13417 37.58357, -88.07156 37.51099))");
            pg1 = new PostGisWriter().Write(geom);
        }

        [Benchmark]
        public Geometry RoundtripDefault()
        {
            var g = br1.Read(pg1);
            var pgtmp = bw1.Write(g);
            return br1.Read(pgtmp);
        }

        [Benchmark]
        public Geometry RoundtripPackedCoordinateSequenceFactory()
        {
            var g = br2.Read(pg1);
            var pgtmp = bw1.Write(g);
            return br2.Read(pgtmp);
        }

        [Benchmark]
        public Geometry RoundtripRawCoordinateSequenceFactory()
        {
            var g = br3.Read(pg1);
            var pgtmp = bw1.Write(g);
            return br3.Read(pgtmp);
        }
    }

    public class Program
    {
        public static void Main(string[] args)
        {
            var summaryStyle = new BenchmarkDotNet.Reports.SummaryStyle(null, false, SizeUnit.B, TimeUnit.Microsecond);
            var config = DefaultConfig.Instance.WithSummaryStyle(summaryStyle);
            config.AddJob(Job.Default
               .WithArguments(new[] { new MsBuildArgument("/p:GenerateProgramFile=false") }).AsDefault());
            BenchmarkSwitcher.FromAssembly(typeof(Program).Assembly).Run(args, config);
        }
    }
}
