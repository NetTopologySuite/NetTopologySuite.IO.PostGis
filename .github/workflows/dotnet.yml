name: Full Continuous Integration

on: [push, pull_request]

jobs:
  pack:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: true

    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macOS-latest ]

    steps:
    - name: PostGis docker image
      if: ${{ matrix.os == 'ubuntu-latest' }} 
      uses: huaxk/postgis-action@v1
      with:
        # See https://https://hub.docker.com/r/mdillon/postgis for available versions, if it 
        # is not specified, use the default value 'latest'
        postgresql version: '11'  
        # This environment variable sets the superuser password for PostgreSQL, maybe string 
        # or secrets, the default superuser is defined by the input environment variable: 
        # postgresql user.
        postgresql password: test
        # This optional environment variable is used in conjunction with postgresql password 
        # to set a user and its password. This variable will create the specified user with 
        # superuser power and a database with the same name. If it is not specified, then the 
        # default user of 'postgres' will be used.
        postgresql user: 'test'  
        # This optional environment variable can be used to define a different name for the 
        # default database that is created when the image is first started. If it is not 
        # specified, then the value of postgresql user will be used.
        postgresql db: 'postgis'  

    - name: Get source
      uses: actions/checkout@v2

    - name: Setup .NET Core 3.1
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.406

    - name: Build
      run: dotnet build -c Release -v minimal -p:WarningLevel=3

    - name: Test
      run: dotnet test -c Release --no-build -v normal

    - name: Pack
      run: dotnet pack -c Release --no-build -o artifacts -p:NoWarn=NU5105

    - name: Upload
      uses: actions/upload-artifact@v2
      with:
        name: NuGet Package Files (${{ matrix.os }})
        path: artifacts

  deployToMyGet:
    name: Deploy to MyGet
    runs-on: ubuntu-latest

    needs: pack
    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/master')

    steps:
    - name: Setup .NET Core 3.1
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.406

    - name: Download Package Files
      uses: actions/download-artifact@v2
      with:
        name: NuGet Package Files (ubuntu-latest)
        path: artifacts

    - name: Publish Package Files to MyGet
      run: dotnet nuget push artifacts/*.nupkg -s https://www.myget.org/F/nettopologysuite/api/v3/index.json -k $MYGET_API_KEY
      shell: bash
      env:
        MYGET_API_KEY: ${{ secrets.MYGET_API_KEY }}

  deployToNuGet:
    name: Deploy to NuGet
    runs-on: ubuntu-latest

    needs: pack
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
    - name: Setup .NET Core 3.1
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.406

    - name: Download Package Files
      uses: actions/download-artifact@v2
      with:
        name: NuGet Package Files (ubuntu-latest)
        path: artifacts

    - name: Publish Package Files to NuGet
      run: dotnet nuget push artifacts/*.nupkg -s https://api.nuget.org/v3/index.json -k $NUGET_API_KEY
      shell: bash
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
